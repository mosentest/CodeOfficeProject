<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
<mapper namespace="mu.codeoffice.mapper.ProblemMapper">
	
	<resultMap id="problem" type="Problem">
		<id property="id" column="pid"/>
		<result property="title" column="title"/>
		<result property="content" column="content"/>
		<result property="solution" column="solution"/>
		<result property="defaultID" column="default_id"/>
		<result property="type" column="type"/>
		<result property="status" column="status"/>
		<result property="experience" column="experience"/>
		<result property="coin" column="coin"/>
		<result property="create" column="create_date"/>
		<result property="recent" column="recent_date"/>
		<result property="attempts" column="attempts"/>
		<result property="successes" column="successes"/>
		<result property="rating" column="rating"/>
		<result property="rates" column="rates"/>
		<result property="shares" column="shares"/>
		<association property="creator" javaType="user" column="creator_id">
			<id property="id" column="uid"/>
			<result property="username" column="username"/>
			<result property="profilePath" column="profile_path"/>
		</association>
	</resultMap>
	
	<sql id="problemlist_select">
		SELECT 
			problem.id AS pid,
			title,
			default_id,
			successes,
			rating
		FROM problem
	</sql>
	
	<sql id="problem_select">
		SELECT 
			problem.id AS pid,
			title,
			content,
			default_id,
			problem.type,
			problem.status,
			problem.create_date,
			problem.recent_date,
			attempts,
			successes,
			problem.experience,
			problem.coin,
			rating,
			rates,
			shares,
			user.id AS uid,
			username,
			profile_path
		FROM problem
	</sql>
	
	<!-- <when test="query.column eq 'blog.category_id'">MATCH(category_path) AGAINST('${query.value}' IN BOOLEAN MODE)</when> -->
	<sql id="queries">
		WHERE status=1
		<if test="queryModel.queries.size != 0">
			<foreach item="query" collection="queryModel.queries" open=" AND " separator=" AND ">
				<choose>
					<when test="query.operator eq 'LIKE'">${query.column} LIKE CONCAT('%', #{query.value},'%')</when>
					<otherwise>${query.column} ${query.operator} #{query.value}</otherwise>
				</choose>
			</foreach>
		</if>
	</sql>
	
	<sql id="order">
		ORDER BY ${order.column} ${order.order}
	</sql>
	
	<sql id="limit">
		LIMIT #{offset}, #{size}
	</sql>
	
	<select id="countDefault" resultType="int">
		SELECT COUNT(*) FROM problem WHERE type=0
	</select>
	
	<select id="getDefault" resultMap="problem">
		<include refid="problemlist_select"/>
		WHERE type=0 
		<include refid="order"/>
		<include refid="limit"/>
	</select>
	
	<select id="countRegular" resultType="int">
		SELECT COUNT(*) FROM problem WHERE type=1 AND status=1
	</select>
	
	<select id="getRegular" resultMap="problem">
		<include refid="problemlist_select"/>
		WHERE type=1 AND status=1
		<include refid="order"/>
		<include refid="limit"/>
	</select>
	
	<select id="countSearch" resultType="int">
		SELECT COUNT(*) FROM problem
		<include refid="queries"/>
	</select>
	
	<select id="getSearch" resultMap="problem">
		<include refid="problemlist_select"/>
		<include refid="queries"/>
		INNER JOIN user ON user.id = problem.creator_id
		<include refid="order"/>
		<include refid="limit"/>
	</select>
	
	<select id="getAllSolvedId" parameterType="long" resultType="long">
		SELECT problem_id FROM problem_solve WHERE user_id=#{uid}
	</select>
	
	<select id="get" resultMap="problem">
		<include refid="problem_select"/>
		INNER JOIN user ON user.id=problem.creator_id
		WHERE problem.id=#{id} AND status=1
	</select>
	
	<select id="isCorrect" resultType="boolean">
		SELECT COUNT(*) = 1 FROM problem WHERE id=#{id} AND solution=#{solution}
	</select>

	<select id="hasSolved" resultType="boolean">
		SELECT COUNT(*) = 1 FROM problem_solve WHERE problem_id=#{id} AND user_id=#{uid}
	</select>
	
	<select id="hasShared" resultType="boolean">
		SELECT COUNT(*) = 1 FROM problem_share WHERE problem_id=#{id} AND user_id=#{uid}
	</select>
	
	<select id="hasRated" resultType="boolean">
		SELECT COUNT(*) = 1 FROM problem_rate WHERE problem_id=#{id} AND user_id=#{uid}
	</select>
	
	<update id="update" parameterType="problem">
		UPDATE problem SET 
			attempts = #{attempts}, 
			successes = #{successes}, 
			recent_date = #{recent},
			rating = #{rating},
			rates = #{rates},
			shares = #{shares}
		WHERE id = #{id}
	</update>
	
	<insert id="solve">
		INSERT INTO problem_solve(problem_id, user_id) VALUES(#{id}, #{uid})
	</insert>
	
	<insert id="share">
		INSERT INTO problem_share(problem_id, user_id) VALUES(#{id}, #{uid})
	</insert>
	
	<insert id="rate">
		INSERT INTO problem_rate(problem_id, user_id) VALUES(#{id}, #{uid})
	</insert>
	
</mapper> 